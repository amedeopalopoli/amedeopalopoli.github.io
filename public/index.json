[{"categories":null,"contents":" A collection of articles, presentations or talks, most likely on Culture and DevOps, because let\u0026rsquo;s admit it, they are one in the same ;)\n","permalink":"http://localhost:1313/blog/force-ssl/","tags":null,"title":"Publications"},{"categories":null,"contents":"In the last decade, novel software architectural patterns, such as microservices, have emerged to improve application modularity and to streamline their development, testing, scaling, and component replacement. To support these new trends, new practices as DevOps methodologies and tools, promoting better cooperation between software development and operations teams, have emerged to support automation and monitoring throughout the whole software construction lifecycle. That affected positively several IT companies, but also helped the transition to the softwarization of complex telco infrastructures in the last years.\nContainer-based technologies played a crucial role by enabling microservice fast deployment and their scalability at low overhead; however, modern container-based applications may easily consist of hundreds of microservices services with complex interdependencies and call for advanced orchestration capabilities. While there are several emerging container orchestration engines, such as Docker Swarm, Kubernetes, Apache Mesos, and Cattle, a thorough functional and performance assessment to help IT managers in the selection of the most appropriate orchestration solution is still missing.\nThis paper aims to fill that gap. Collected experimental results show that Kubernetes outperforms its counterparts for very complex application deployments, while other engines can be a better choice for simpler deployments.\nDate of Conference: 20-24 May 2019 Date Added to IEEE Xplore: 15 July 2019\nAuthors: Isam Mashhour Al Jawarneh, Paolo Bellavista, Filippo Bosi, Luca Foschini, Giuseppe Martuscelli, Rebecca Montanari, Amedeo Palopoli\n","permalink":"http://localhost:1313/publications/containerorchestration/","tags":["Containers","Kubernetes","Apache Mesos","Docker Swarm","Rancher"],"title":"Container orchestration engines: A thorough functional and performance comparison"},{"categories":null,"contents":"Current cloud deployments heavily depend on hypervisor-based virtualizations. The overarching characteristics of Docker and containerization have given them a momentum in their widespread adoption recently as alternatives for their counterparts. However, little research has been done for comparing the QoS of both technologies, thus leaving the domain without widely accepted performance metrics. Aiming at informing the decision of the best fit in a specific cloud deployment, we have designed performance metrics that compare the performance of both designs in an in-house cluster deployed by using OpenStack. We focus on well-established representatives as baselines, including KVM from the hypervisor-based side, LXD from the container-based side in addition to Docker.\nOur results show that containerization is not a predominant fit-all solution that can always replace hypervisors for all cluster deployment and application scenarios. It can instead be thought of as a complementary solution to use for specific application scenarios that are constrained with conditions that are solved by containerization merits.\nAuthors: Isam Mashhour Al Jawarneh, Paolo Bellavista, Luca Foschini, Giuseppe Martuscelli, Rebecca Montanari, Amedeo Palopoli, Filippo Bosi\n","permalink":"http://localhost:1313/publications/performancemetrics/","tags":["Containers","OpenStack","Cloud Computing"],"title":"QoS and performance metrics for container-based virtualization in cloud environments"},{"categories":null,"contents":"The increasing adoption of cloud computing is strongly influenced by emerging of technologies whose aim is to improve the development and deployment processes of enterprise applications. The goal of this thesis is to investigate one of these solutions, called “containerization”, and deeply analyze how this solution can be included in cloud infrastructures as an alternative to complementary solutions like virtual machines. So far, the virtual machine model has been the predominant solution. The key differentiator nature that containers offer has stimulated an increasing adoption of this technology because improves resource management, resource sharing, and it guarantees substantial improvements regarding provisioning time of single instances.\nIn this work, we will analyze the containerization paradigm from both infrastructure and application point of views. For the first one, we will investigate the performances by comparing LXD, Docker, and KVM, as hypervisor of OpenStack cloud infrastructure, while the second one concerns the development of enterprise applications that are distributed over a set of server hosts. In this case, we need to exploit high-level services such as orchestration. Therefore, we will compare the performances of the following container orchestrators: Kubernetes, Docker Swarm, Apache Mesos, and Cattle.\nAuthors: Amedeo Palopoli\n","permalink":"http://localhost:1313/publications/thesisbook/","tags":["Containers","OpenStack","Cloud Computing"],"title":"Containerization in Cloud Computing: performance analysis of virtualization architectures"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ] ","permalink":"http://localhost:1313/search/","tags":null,"title":"Search Results"}]